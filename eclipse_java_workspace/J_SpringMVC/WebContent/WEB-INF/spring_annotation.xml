<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:tool="http://www.springframework.org/schema/tool"
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:lang="http://www.springframework.org/schema/lang"
    xmlns:jms="http://www.springframework.org/schema/jms"
    xmlns:task="http://www.springframework.org/schema/task"
    xmlns:cache="http://www.springframework.org/schema/cache"
    xmlns:oxm="http://www.springframework.org/schema/oxm"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:websocket="http://www.springframework.org/schema/websocket"
    xmlns:security="http://www.springframework.org/schema/security"
    xmlns:redis="http://www.springframework.org/schema/redis"
    xmlns:mongo="http://www.springframework.org/schema/data/mongo"
    xmlns:hdp="http://www.springframework.org/schema/hadoop"
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xmlns:batch="http://www.springframework.org/schema/batch"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:c="http://www.springframework.org/schema/c"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx.xsd
                        http://www.springframework.org/schema/util
                        http://www.springframework.org/schema/util/spring-util.xsd
                        http://www.springframework.org/schema/tool
                        http://www.springframework.org/schema/tool/spring-tool.xsd
                        http://www.springframework.org/schema/jee
                        http://www.springframework.org/schema/jee/spring-jee.xsd
                        http://www.springframework.org/schema/jms
                        http://www.springframework.org/schema/jms/spring-jms.xsd
                        http://www.springframework.org/schema/task
                        http://www.springframework.org/schema/task/spring-task.xsd
                        http://www.springframework.org/schema/cache
                        http://www.springframework.org/schema/cache/spring-cache.xsd
                        http://www.springframework.org/schema/lang
                        http://www.springframework.org/schema/lang/spring-lang.xsd
                        http://www.springframework.org/schema/jdbc
                        http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
                        http://www.springframework.org/schema/oxm
                        http://www.springframework.org/schema/oxm/spring-oxm.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd
                        http://www.springframework.org/schema/websocket
                        http://www.springframework.org/schema/websocket/spring-websocket.xsd
                        http://www.springframework.org/schema/security
                        http://www.springframework.org/schema/security/spring-security.xsd
                        http://www.springframework.org/schema/redis
                        http://www.springframework.org/schema/redis/spring-redis.xsd
                        http://www.springframework.org/schema/data/mongo
                        http://www.springframework.org/schema/data/mongo/spring-mongo.xsd 
                        http://www.springframework.org/schema/hadoop
                        http://www.springframework.org/schema/hadoop/spring-hadoop.xsd
                        http://www.springframework.org/schema/data/jpa
                        http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
                        http://www.springframework.org/schema/batch
                        http://www.springframework.org/schema/batch/spring-batch.xsd">
						
	 				 
	
	<context:component-scan base-package="hateoas" />
	<context:component-scan base-package="reset" />
	<context:component-scan base-package="spring_jsp.annotation" />
	<context:component-scan base-package="myservlet.spring" />
	<!-- 
	<context:component-scan base-package="myservlet.filter" />
	 -->
	 
  <!--基于 InternalResourceViewResolver 就不用像 UrlBasedViewResolver 指定viewClass 
	<bean  class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix"  value=".jsp"/>
	</bean>
	-->
	
	<!-- p:表示property标签  	-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" 
				p:prefix="/WEB-INF/jsp/" p:suffix=".jsp"/>
				
	<!--JSON ContentNegotiatingViewResolver 可选 的  
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1" />
		<property name="defaultViews">
			<list>
				<bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
					<property name="prefixJson" value="false" />
				</bean>
			</list>
		</property>
	</bean>
	 -->
<!-- XML 可选的
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager" />
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="favorPathExtension" value="true" />
		<property name="favorParameter" value="false" />
		<property name="ignoreAcceptHeader" value="true" />
		<property name="mediaTypes">
			<props>
				<prop key="json">application/json</prop>
				<prop key="xml">application/xml</prop>
			</props>
		</property>
	</bean>
 -->
 
 
 <!-- 也可以这样配置 　@Valid 是有效的，  但converter无效？？？
 <mvc:annotation-driven>
 	<mvc:message-converters>
 		<ref bean="mappingJackson2HttpMessageConverter" />
 	</mvc:message-converters>
 </mvc:annotation-driven>
 -->
 <!-- RequestMappingHandlerAdapter  　 的配置影响　@Valid的有效性 ???   -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJackson2HttpMessageConverter" />
				<bean class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter"/> 
				<bean class="org.springframework.http.converter.StringHttpMessageConverter"/>				 
			</list>
		</property>
		<property name="cacheSeconds" value="0" />
	    <property name="webBindingInitializer">  
	        <bean class="spring_jsp.extention.MyWebBindingInitializer" />
	    </property>
	</bean>
	 
 
	<bean id="mappingJackson2HttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"> <!--  produces="application/json" -->
		<property name="objectMapper" ref="jacksonObjectMapper2"> </property>
	</bean>
	<bean id="jacksonObjectMapper"  class="com.fasterxml.jackson.databind.ObjectMapper">
          <property name="dateFormat">
              <bean class="java.text.SimpleDateFormat">
                  <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss"/> 
              </bean>
          </property>
		<property name="timeZone">  <!-- 对Timestamp类型 -->
			<bean class="java.util.TimeZone"  factory-method="getTimeZone" >
				<constructor-arg value="GMT+8"/> 
			</bean>
		</property>
     </bean>
	<!--  对enum类型中有的自定义属性会忽略，只转换每一个分号前的值  -->
	<bean id="jacksonObjectMapper2" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject">
            <bean class="com.fasterxml.jackson.databind.ObjectMapper"> 
                 <property name="dateFormat">
                    <bean class="java.text.SimpleDateFormat">
                        <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
                    </bean>
                </property>
               <!-- 为null字段时不显示
                <property name="serializationInclusion"> 
                    <value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value>
                </property>
                -->
                <!-- null值显示，自定义为显示空串，但对日期类型服务端可转换为null -->
	           	<property name="serializerProvider">  
	                <bean class="com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl">  
	                    <property name="nullValueSerializer">  
	                        <bean class="spring_jsp.extention.JsonNullEmptySerializer"></bean>  
	                    </property>  
	                </bean>  
	            </property>
	             
            </bean>
        </property>
        <property name="targetMethod" value="configure" />
        <property name="arguments">
            <list>
                <value type="com.fasterxml.jackson.databind.DeserializationFeature">FAIL_ON_UNKNOWN_PROPERTIES</value>
                <value>false</value><!--  反序列化遇到未知属性不报异常 -->
            </list>
        </property>
    </bean>
	
	
	<mvc:view-controller path="home.mvc" view-name="redirect:employee.mvc"/><!-- 可以path="/" -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/employee/*"/>
			<bean class="spring_jsp.extention.MyInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>
  	
  	
  	
  	<!--  Employee childIds的逗号分隔多个不好使？？？ ajaxJson.html
  	<mvc:default-servlet-handler />
    <bean id="conversionService"
        class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <bean class="spring_jsp.extention.StringListConverter" />
                <bean class="spring_jsp.extention.ListStringConverter" />
            </set>
        </property>
    </bean>
   <mvc:annotation-driven conversion-service="conversionService" />
     -->
	<!--  为@Valid  要加 hibernate-validator-.jar -->
	<mvc:annotation-driven  validator="validator"   />
	
	<bean id="validator"  class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass"  value="org.hibernate.validator.HibernateValidator"/>
        <property name="validationMessageSource" ref="messageSource"/> <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
	</bean> 


	<!-- 国际化  基于JDK的实现  basename 包名格式 ,文件名要有 messages_en.properties 和 messages_zh.properties   -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="conf.messages"/> 
	</bean>
	
	 
	 <!-- Reloadable basename也可  WEB-INF/messages ，使用属性basenames可配置多个
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="cacheSeconds" value="600"></property>
		<property name="useCodeAsDefaultMessage" value="true"></property>
		<property name="basename" value="classpath:/conf/messages"/>  
	</bean>
	-->
	<!-- 文件上传 必须是 id="multipartResolver"  --> 
	<bean  id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
	    <property name="defaultEncoding" value="UTF-8"></property><!-- 中文文件名 OK 加了CharacterEncodingFilter-->
	    <property name="maxUploadSize" value="10000000"/> <!--单位是 bytes  可能会抛 org.springframework.web.multipart.MaxUploadSizeExceededException (是RuntimeException)-->
	</bean>
	
	<!--   -->
	<import resource="error-config.xml"/>
	
	 
	 
	 <!-- 为  easyUI sqlView.html   SQLWorkBeanchController
	<import resource="datasource.xml"/>
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg ref="dataSource"/>
    </bean>
    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
     <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
            <property name="transactionManager" ref="transactionManager" />
            <property name="propagationBehaviorName" value="PROPAGATION_REQUIRED"></property>
            <property name="isolationLevelName" value="ISOLATION_SERIALIZABLE"></property>
    </bean>
	  ISOLATION_SERIALIZABLE ISOLATION_DEFAULT  
	-->
	
	 <!-- 
	 <context:property-placeholder location="classpath:jdbc.properties"/>
	 
	 <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialPoolSize" value="1"/>
        <property name="maxIdleTime" value="600"/>
    </bean>
	 -->
	
	 <!-- 可配置多个mvc:mapping ,也可使用CorsRegistry在代码级配置
	<mvc:cors>
		 <mvc:mapping path="/cors/**"  
	        allowed-origins="http://localhost:8080, http://127.0.0.1:8080"  
	        allowed-methods="GET, POST"  
	        allowed-headers="content-type"
	        allow-credentials="false"  
	        max-age="123" />  
	</mvc:cors>
	-->
	
</beans>

