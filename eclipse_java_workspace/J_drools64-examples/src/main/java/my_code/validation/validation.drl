package com.sample.validation;

import my_code.validation.Customer;
import my_code.validation.Account;
import java.util.Date;

import function my_code.validation.ValidationService.error;  // import function 导入java类的 static方法
import function my_code.validation.ValidationService.warning;


function boolean isAccountNumberUnique(Account $accout) {
	String id = "1";
	String accountId = $accout.getUuid();
    return id.equals(accountId);  
}


function Integer yearsPassedSince(Date $date1) {
    return 28;  
}




rule "addressRequired"
	when
		$customer : Customer( address == null ||  address == '')
	then
		warning(kcontext, $customer, "地址不能为空");//是导入的static的java 方法
		System.out.println( "RuleName= " + kcontext.getRule().getName() );
end



rule "phoneNumberRequired"
 	when
 		$customer : Customer( phoneNumber == null || == "" )		
	then
		error(kcontext, $customer, "请输入电话号码");
		System.out.println( "RuleName= " + kcontext.getRule().getName() );
end



rule "accountOwnerRequired"
	when
		$account : Account( owner == null )		
	then		
		error(kcontext, $account, "账户拥有人不能为空");
		System.out.println( "RuleName= " + kcontext.getRule().getName() );
end



rule "studentAccountCustomerAgeLessThan"
	when				
		Customer( yearsPassedSince(dateOfBirth) >= 27 )
		$account : Account( type == Account.Type.STUDENT )		
	then
		error(kcontext, $account, "大于27岁，不能申请学生账户");
		System.out.println( "RuleName= " + kcontext.getRule().getName() );
end



rule "accountBalanceAtLeast"
	when
		$account : Account( balance < 100 )		
	then		
		warning(kcontext, $account, "账户余额不能少于100");
		System.out.println( "RuleName= " + kcontext.getRule().getName() );
end 



rule "accountNumberUnique"
	when
		$account : Account(isAccountNumberUnique($account))
	then
		error(kcontext, $account, "账户号只能是唯一的");
		System.out.println( "RuleName= " + kcontext.getRule().getName() );
end
