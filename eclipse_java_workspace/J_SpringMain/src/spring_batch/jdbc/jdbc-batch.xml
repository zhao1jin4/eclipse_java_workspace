<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:tool="http://www.springframework.org/schema/tool"
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:lang="http://www.springframework.org/schema/lang"
    xmlns:jms="http://www.springframework.org/schema/jms"
    xmlns:task="http://www.springframework.org/schema/task"
    xmlns:cache="http://www.springframework.org/schema/cache"
    xmlns:oxm="http://www.springframework.org/schema/oxm"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:websocket="http://www.springframework.org/schema/websocket"
    xmlns:security="http://www.springframework.org/schema/security"
    xmlns:redis="http://www.springframework.org/schema/redis"
    xmlns:mongo="http://www.springframework.org/schema/data/mongo"
    xmlns:hdp="http://www.springframework.org/schema/hadoop"
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xmlns:batch="http://www.springframework.org/schema/batch"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:c="http://www.springframework.org/schema/c"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.2.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
                        http://www.springframework.org/schema/util
                        http://www.springframework.org/schema/util/spring-util-4.2.xsd
                        http://www.springframework.org/schema/tool
                        http://www.springframework.org/schema/tool/spring-tool-4.2.xsd
                        http://www.springframework.org/schema/jee
                        http://www.springframework.org/schema/jee/spring-jee-4.2.xsd
                        http://www.springframework.org/schema/jms
                        http://www.springframework.org/schema/jms/spring-jms-4.2.xsd
                        http://www.springframework.org/schema/task
                        http://www.springframework.org/schema/task/spring-task-4.2.xsd
                        http://www.springframework.org/schema/cache
                        http://www.springframework.org/schema/cache/spring-cache-4.2.xsd
                        http://www.springframework.org/schema/lang
                        http://www.springframework.org/schema/lang/spring-lang-4.2.xsd
                        http://www.springframework.org/schema/jdbc
                        http://www.springframework.org/schema/jdbc/spring-jdbc-4.2.xsd
                        http://www.springframework.org/schema/oxm
                        http://www.springframework.org/schema/oxm/spring-oxm-4.2.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
                        http://www.springframework.org/schema/websocket
                        http://www.springframework.org/schema/websocket/spring-websocket-4.2.xsd
                        http://www.springframework.org/schema/security
                        http://www.springframework.org/schema/security/spring-security-4.0.xsd
                        http://www.springframework.org/schema/redis
                        http://www.springframework.org/schema/redis/spring-redis-1.0.xsd
                        http://www.springframework.org/schema/data/mongo
                        http://www.springframework.org/schema/data/mongo/spring-mongo-1.7.xsd 
                        http://www.springframework.org/schema/hadoop
                        http://www.springframework.org/schema/hadoop/spring-hadoop-2.1.xsd
                        http://www.springframework.org/schema/data/jpa
                        http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
                        http://www.springframework.org/schema/batch
                        http://www.springframework.org/schema/batch/spring-batch-3.0.xsd">
                        
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="jdbc.properties"></property>
    </bean>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driver}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        
                <!-- 初始化连接池时连接数量为5个 -->
        <property name="initialPoolSize" value="5" />
                <!-- 允许最小连接数量为5个 -->
        <property name="minPoolSize" value="5" />
                <!-- 允许最大连接数量为20个 -->
        <property name="maxPoolSize" value="20" />
                <!-- 允许连接池最大生成100个PreparedStatement对象 -->
        <property name="maxStatements" value="100" />
                <!-- 连接有效时间，连接超过3600秒未使用，则该连接丢弃 -->
        <property name="maxIdleTime" value="3600" />
                <!-- 连接用完时，一次产生的新连接步进值为2 -->
        <property name="acquireIncrement" value="2" />
                <!-- 获取连接失败后再尝试10次，再失败则返回DAOException异常 -->
        <property name="acquireRetryAttempts" value="10" />
                <!-- 获取下一次连接时最短间隔600毫秒，有助于提高性能 -->
        <property name="acquireRetryDelay" value="600" />
                <!-- 检查连接的有效性，此处小弟不是很懂什么意思 -->
        <property name="testConnectionOnCheckin" value="true" />
                <!-- 每个1200秒检查连接对象状态 -->
        <property name="idleConnectionTestPeriod" value="1200" />
                <!-- 获取新连接的超时时间为10000毫秒 -->
        <property name="checkoutTimeout" value="10000" />
    </bean>
    
     <bean id="jobLauncher"  class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
         <property name="jobRepository" ref="jobRepository" />
     </bean>
 
    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
        <property name="transactionManager" ref="transactionManager" />
    </bean>
  
    <bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager"/>
  
    <bean id="jdbcProcessor" class="spring_batch.jdbc.JDBCProcessor"/>
  
	<bean id="jdbcItemWriter"  class="org.springframework.batch.item.database.JdbcBatchItemWriter">
	    <property name="dataSource" ref="dataSource" />
	    <property name="sql"  value="insert into student (id,name,age)  values (:id,:name,:age)" /> <!-- :属性名 对应于 Student属性名 -->
	    <property name="itemSqlParameterSourceProvider">
	        <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
	    </property>
	</bean>
  
    <!--  page    如是MySQL第1页自动加  ORDER BY id ASC LIMIT 3,第二页自动加  AND ((id > 3)) ORDER BY id ASC LIMIT 3
    id是auto_increment 方式生成的,如有删除数据导致不连续的,就多读几次, 不影响批处理--> 
	<bean id="jdbcPageReader" class="org.springframework.batch.item.database.JdbcPagingItemReader">
		<property name="dataSource" ref="dataSource" />
		<property name="queryProvider">
			<bean class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
			     <property name="dataSource"  ref="dataSource"></property>
				<property name="selectClause" value="select id, name" />
				<property name="fromClause" value="from student" />
				<property name="whereClause" value="where age > :age" />
				<property name="sortKey" value="id" />
			</bean>
		</property>
		<property name="parameterValues">
			<map>
				<entry key="age" value="20" />
			</map>
		</property>
		<property name="pageSize" value="3" />
		<property name="rowMapper"  >
			<bean class="org.springframework.jdbc.core.BeanPropertyRowMapper">
			    <property name="mappedClass" value="spring_batch.Student"/>
			</bean>
		</property>
	</bean>
	
	 <batch:job id="jdbcPageJob">
         <batch:step id="pageStep">
             <batch:tasklet>
                 <batch:chunk reader="jdbcPageReader" writer="jdbcItemWriter" processor="jdbcProcessor"  commit-interval="1">
                 </batch:chunk>
             </batch:tasklet>
         </batch:step>
     </batch:job>
     
	
    <!--  cursor , 就是ResultSet , 根据写的sql查全部数据--> 
    <batch:job id="jdbcCursorJob">
         <batch:step id="cursorStep">
             <batch:tasklet>
                 <batch:chunk reader="jdbcCursorReader" writer="jdbcItemWriter" processor="jdbcProcessor"  commit-interval="1">
                 </batch:chunk>
             </batch:tasklet>
         </batch:step>
     </batch:job>

	<bean id="jdbcCursorReader" class="org.springframework.batch.item.database.JdbcCursorItemReader" scope="step">
	    <property name="dataSource" ref="dataSource" />
	    <property name="sql"   value="select id, name from student where id &lt; ?" />
	    <property name="rowMapper">
	        <bean class="org.springframework.jdbc.core.BeanPropertyRowMapper">
	            <property name="mappedClass" value="spring_batch.Student" />
	        </bean>
	    </property>
	    <property name="preparedStatementSetter" ref="paramStatementSetter" />
	</bean>
	
	<bean id="paramStatementSetter" class="org.springframework.batch.core.resource.ListPreparedStatementSetter"  scope="step">
	    <property name="parameters">
	        <list>
	            <value>#{jobParameters['id']}</value>
	        </list>
	    </property>
	</bean>
	

	
	<!--   skip 设置  
	 <job id="csvJob">
        <step id="csvStep">
            <tasklet transaction-manager="transactionManager">
                <chunk reader="itemReaders" writer="itemWriter" processor="itemProcessor"
                    commit-interval="1" skip-limit="1000" skip-policy="mySkipPolicy">
                    <skippable-exception-classes>
                        <include class="org.springframework.batch.item.file.FlatFileParseException" />
                    </skippable-exception-classes>
                </chunk>
            </tasklet>
        </step>
    </job>
           添加了skip-policy属性后  skip-limit和skippable-exception-classes默认策略将不再起作用
           当Reader   发生可以被skip的例外时  SpringBatch会接着去读下面一条记录，并不会回滚事务
            当Processor发生可以被skip的例外时 SpringBatch会回滚当前chunk的事务
           当Writer发生可以被skip的例外的时，SpringBatch首先回滚事务，  因为传给Writer的是一个list，所以Writer不知道是list中那条记录造成了例外的发生。Writer会将list拆开，一条条的处理，正确的数据提交，错误的数据回滚。
	 -->
	  <bean id="mySkipPolicy" class="spring_batch.jdbc.MySkipPolicy"/>
     
	
    <!-- 
    
    Bean的scope属性为step，这是SpringBatch的一个后绑定技术，就是在生成Step的时候，才去创建bean，因为这个时候jobparameter才传过来。
    如果加载配置信息的时候就创建bean，这个时候jobparameter的值还没有产生，会抛出异常。
    
    
    <job id="batchJob">            
    ......        
    <validator ref="jobParametersValidator" />        
</job>            
<bean:bean id="jobParametersValidator"            
    class="org.springframework.batch.core.job.DefaultJobParametersValidator">        
    <bean:property name="requiredKeys">        
        <bean:set>    
            <bean:value>para1</bean:value>
            <bean:value>para2</bean:value>
            <bean:value>para3</bean:value>
        </bean:set>    
    </bean:property>        
    <bean:property name="optionalKeys">        
        <bean:set>    
            <bean:value>para4</bean:value>
        </bean:set>    
    </bean:property>        
</bean:bean>    


同一个Job在batch启动后被多次调用的场合,为parameters添加一个自增的值，以区分不同的Job实例,仅仅是为了标示不同JobInstance
<job id="batchJob" incrementer="sampleIncrementer">         
</job>        
<bean:bean id="sampleIncrementer class="org.springframework.batch.core.launch.support.RunIdIncrementer"/>
     -->
     
     
</beans> 