[main]
authc.loginUrl=/login.ser
#如没登录跳转页,要和登录表单提交地址一样才知道从哪取到用户名密码
#authc就是 FormAuthenticationFilter  页中用户名要为username,密码为passsword,修改方法(类中有) 
authc.usernameParam=j_username
authc.passwordParam=j_password
authc.rememberMeParam=j_rememberMe

roles.unauthorizedUrl=/noRole.jsp
#如没有要求的角色跳转页
perms.unauthorizedUrl=/noPerm.jsp
#如没有权限的角色跳转页
logout.redirectUrl=/web/login.jsp
#退出后的跳转页

#perms.enabled=false
#表示不使用这个过滤器

[users] 
lisi=123,adminRole
wang=456,queryRole

[roles]
adminRole=employee:*
queryRole=employee:query

[urls]
#=后是过滤器的顺序 ，路径也是从上到下的顺序匹配
/js/**=anon
/img/**=anon
/web/main.jsp=anon
#/web/login.jsp=anon 
#可以不用配置 logout.redirectUrl已经做了

#anon 是shiro的匿名过滤器
#authc 过滤器 表示必须要登录 ,roles 角色过滤器 

/employee/create.ser=authc,roles[adminRole]
/employee/query.ser=authc,roles[queryRole]
/web/query.jsp=authc,roles[adminRole]
#.jsp也能拦截的,web.xml配置了FORWARD拦截不到

/employee/delete.ser=perms[employee:delete]
#perms 权限过滤器

/logout.ser=logout
#logout 退出过滤器,会清session,页面直接请求这个地址,不用自己实现

#登录表单提交地址要authc
/login.ser=authc
#/**=authc


