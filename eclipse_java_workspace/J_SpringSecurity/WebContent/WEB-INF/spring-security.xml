<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-3.1.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
						http://www.springframework.org/schema/util 
						http://www.springframework.org/schema/util/spring-util-3.1.xsd
						http://www.springframework.org/schema/mvc 
						http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
						http://www.springframework.org/schema/security
						http://www.springframework.org/schema/security/spring-security-3.1.xsd">
	
<!-- use-expressions=true 表示开启表达式,看 http://www.family168.com/tutorial/springsecurity3/html/el-access.html -->
<security:http auto-config="true" use-expressions="true" access-denied-page="/auth/denied.mvc" >
	<security:intercept-url pattern="/auth/login.mvc" access="permitAll" requires-channel="http"  method="GET"/>  <!-- permitAll是 SecurityExpressionRoot类中的方法名字 ,有http,https,any-->
	<security:intercept-url pattern="/main/anony*" access="permitAll"/>
	<security:intercept-url pattern="/main/test*"  access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" />
	<security:intercept-url pattern="/main/admin.mvc" access="hasRole('ROLE_ADMIN')"/>
	<security:intercept-url pattern="/main/common.mvc" access="hasRole('ROLE_USER')"/>
	
	<!--方式一  ,使用浏览器弹出对框的方式输入用户,密码, <security:http-basic />  -->
	<!-- 方式二,自定义页面 -->	
	<security:form-login login-page="/auth/login.mvc"
		 authentication-failure-url="/auth/login.mvc?error=true" 
			     default-target-url="/main/common.mvc"/>
	
	<security:logout  invalidate-session="true" 
					  logout-success-url="/auth/login.mvc" 
							  logout-url="/auth/logout.mvc"/><!-- 对应页面中的退出的链接 -->
	<security:session-management>		
		<security:concurrency-control max-sessions="1" error-if-maximum-exceeded="true"/> <!-- 只可有一个会话用户在线, 要配<listener-class>HttpSessionEventPublisher -->
		<!-- 跳到  authentication-failure-url 指定面,使用 ${sessionScope.SPRING_SECURITY_LAST_EXCEPTION.message}显示
		国际化 ConcurrentSessionControlStrategy.exceededAllowed  -->
	</security:session-management>
</security:http>
	
<!-- 用户,角色,密码的存储方式 -->
<bean id="customUserDetailsService" class="org.liukai.tutorial.service.CustomUserDetailsService"/>	<!--  implements UserDetailsService -->
<bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>
 <bean id="myUserDetailsService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl"> 
	<property name="dataSource" ref="dataSource"/>
</bean>
<security:authentication-manager>
	<security:authentication-provider user-service-ref="customUserDetailsService" >
		<!--方式一,自定义取用户密码方式,使用user-service-ref="customUserDetailsService" ,就不可有XML子节点
			如 user-service-ref='myUserDetailsService' 同 <jdbc-user-service data-source-ref= > -->
	
		<!-- 方式二,存在DB中 
		<security:jdbc-user-service data-source-ref="dataSource"/>
		-->
		<!--方式三,写在配置文件中 
		<security:user-service> 
			<security:user name="user" authorities="ROLE_USER" password="ee11cbb19052e40b07aac0ca060c23ee"/>
			<security:user name="admin" authorities="ROLE_USER,ROLE_ADMIN" password="21232f297a57a5a743894a0e4a801fc3"/>
		</security:user-service>
		-->	
		<security:password-encoder hash="md5"/><!-- hash="sha" 或  ref="passwordEncoder" -->
	</security:authentication-provider>
</security:authentication-manager>

	
	
<!-- 使用 @Secure("ROLE_USER") 要 secured-annotations="enabled" ,
	使用@PreAuthorize或 @PostAuthorize要打开 pre-post-annotations="enabled"-->
	<!--  jsr250-annotations="enabled"   -->
<security:global-method-security  secured-annotations="enabled" pre-post-annotations="enabled">
	 <!--无效??? <security:protect-pointcut access="ROLE_ADMIN" expression="execution(* org.liukai.tutoria.service.*Service.other(..))"/>  --> 
</security:global-method-security>


<!--
<bean id="" class="org.springframework.security.web.FilterChainProxy">
		<security:filter-chain-map path-type="ant">
		<security:filter-chain filters="" pattern="/**"/>
	</security:filter-chain-map>
</bean>
-->

</beans>

