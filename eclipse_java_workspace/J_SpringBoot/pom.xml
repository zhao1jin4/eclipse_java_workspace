<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.zhojin</groupId>
	<artifactId>J_SpringBoot</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging> <!-- jar, war for jsp and tomcat-->
	

	<name>J_SpringBoot</name>
	<description>my project for Spring Boot</description>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.2.1.RELEASE</version>  
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<!--
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
	
		<java.version>1.8</java.version>
			-->
		<maven.compiler.source>11</maven.compiler.source>
		<maven.compiler.target>11</maven.compiler.target>
	
		<java.version>11</java.version>
		<mybatis.version>3.3.0</mybatis.version> <!-- 3.4.5没有SqlSession只可3.3.0 -->
		<docker.image.prefix>springio</docker.image.prefix>
   </properties>

	<dependencies>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
		 
		<dependency>
	        <groupId>org.springframework</groupId>
	        <artifactId>spring-context</artifactId>
	    </dependency>
	  
		 <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
	 	<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		
		
		
		<!--	 默认tomcat,如要用jetty 
		 <dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-web</artifactId>
		    <exclusions>
		      <exclusion>
		        <groupId>org.springframework.boot</groupId>
		        <artifactId>spring-boot-starter-tomcat</artifactId>
		      </exclusion>
		    </exclusions>
		  </dependency>
		  <dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-jetty</artifactId>
		  </dependency>
		  -->
		  
 
		 <!--
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-freemarker</artifactId>
		</dependency> 
	    <dependency>
		  <groupId>org.freemarker</groupId>
		  <artifactId>freemarker</artifactId>
		  <version>2.3.28</version>
		</dependency>
		
	 thymeleaf和freemarker只同时打开一个maven   -->
		 
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency> 




		<!--  sockjs_stomp -->
		<dependency>
		   <groupId>org.webjars</groupId>
		   <artifactId>bootstrap</artifactId>
		   <version>4.2.1</version>
		</dependency>
		<dependency>
		   <groupId>org.webjars</groupId>
		   <artifactId>jquery</artifactId>
		   <version>3.3.0</version>
		</dependency>
		<dependency>
		    <groupId>org.webjars</groupId>
		    <artifactId>sockjs-client</artifactId>
		    <version>1.1.2</version>
		</dependency>
		<dependency>
		    <groupId>org.webjars</groupId>
		    <artifactId>stomp-websocket</artifactId>
		    <version>2.3.3</version>
		</dependency>

				
	   <!-- 为socket_p2p -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId> spring-boot-starter-security</artifactId>
		</dependency> 
		 <dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId> 
		</dependency>
		
		
		 <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId> spring-boot-starter-websocket</artifactId>
		</dependency> 
		
		 <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
		</dependency> 
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
 
 
	  <dependency>
	      <groupId>org.webjars</groupId>
	      <artifactId>sockjs-client</artifactId>
	      <version>1.1.2</version>
	  </dependency>
	  <dependency>
	      <groupId>org.webjars</groupId>
	      <artifactId>stomp-websocket</artifactId>
	      <version>2.3.3</version>
	  </dependency>
	 <dependency>
	   <groupId>org.webjars</groupId>
	   <artifactId>bootstrap</artifactId>
	   <version>4.2.1</version>
	</dependency>
	<dependency>
	   <groupId>org.webjars</groupId>
	   <artifactId>jquery</artifactId>
	   <version>3.3.0</version>
	</dependency>
   
   
 	
	</dependencies>
	<dependencyManagement>
	  
	</dependencyManagement>
	<build>
		<plugins>
			
			
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
			        <mainClass>config.MainApplication</mainClass>
			    </configuration>
			</plugin> 
			<!-- 当有多个@SpringBootApplication的类时才需要加mainClass配置
			   mvn spring-boot:run 来启动,打包直接mvn package就是可执行jar包
			   (会生成 x.jar.original,在MANIFEST.MF中没有指定Main-Class,里面没有jar包)
				自己的东西在BOOT-INF目录中,有lib目录和classes目录
				新版本2.1 是可以带resources下所有的东西，老版 1.4.2 本就不会带所有的
				//File file=org.springframework.util.ResourceUtils.getFile("classpath:config/my.ini");//打成jar包就不行了
				ClassPathResource classPathResource = new org.springframework.core.io.ClassPathResource("config/my.ini");
				InputStream inputStream = classPathResource.getInputStream(); 
			-->
			<plugin>
	            <groupId>com.spotify</groupId>
	            <artifactId>docker-maven-plugin</artifactId>
	            <version>0.4.11</version>
	            <configuration>
	                <imageName>${docker.image.prefix}/${project.artifactId}</imageName>
	                <dockerDirectory>src/main/docker</dockerDirectory>
	                <!--CentOS 7 
					打开/usr/lib/systemd/system/docker.service文件，修改ExecStart这行 
					ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock
					(原来没-H参数，启动后就监听2375端口)
					-->
	                <dockerHost>http://172.16.35.35:2375</dockerHost>
	                 
	                <resources>
	                    <resource>
	                        <targetPath>/</targetPath>
	                        <directory>${project.build.directory}</directory>
	                        <include>${project.build.finalName}.jar</include>
	                    </resource>
	                </resources>
	            </configuration>
	        </plugin>
	        
	  <!--       
	  <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.6.1</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>  
       -->
      
		</plugins>
	</build>
	<!--   -->
	<repositories>  
	    <repository>  
	        <id>central</id>  
	        <name>Maven Repository Switchboard</name>  
	        <url>http://repo.spring.io/libs-release/</url>  
	        <layout>default</layout>  
	        <snapshots>  
	            <enabled>false</enabled>  
	        </snapshots>  
	    </repository>  
	</repositories>  

</project>
